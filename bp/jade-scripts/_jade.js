// Generated by LiveScript 1.2.0
(function(){
  var fs, jade, View, Names, Relation, _, filters, code;
  fs = require('fs');
  jade = require('jade');
  View = require('./_view').View;
  Names = require('./Names');
  Relation = require('./Relation');
  _ = require('underscore');
  import$(jade.filters, filters = require('./_jade-filters'));
  module.exports = {
    getView: function(docName, componentName, templateName, templateType){
      return this.view = View.getView.apply(View, arguments);
    },
    setMainNav: function(templateNames){
      var i$, len$, name, results$ = [];
      if (typeof templateNames === 'string') {
        templateNames = templateNames.split(',');
      }
      for (i$ = 0, len$ = templateNames.length; i$ < len$; ++i$) {
        name = templateNames[i$];
        name = name.trim();
        results$.push(View.registry[name].isMainNav = true);
      }
      return results$;
    },
    value: function(attr){
      var ref$, docName, result;
      if (attr.indexOf('.') > 0) {
        ref$ = attr.split('.'), docName = ref$[0], attr = ref$[1];
        result = "{{#with " + docName + "}} {{bs '" + attr + "'}} {{/with}}";
      } else {
        result = "{{bs '" + attr + "'}}";
      }
      console.log("attr is: " + attr + ", result is: ", result);
      return result;
    },
    getCitedDocName: function(attr, cited){
      var docName, cite;
      for (docName in cited) {
        cite = cited[docName];
        if (cite.attributes && in$(attr, cite.attributes)) {
          return docName;
        }
      }
    },
    getCitedDoc: function(attr, cited){
      var docName, cite;
      for (docName in cited) {
        cite = cited[docName];
        if (cite.attributes && in$(attr, cite.attributes)) {
          return docName;
        }
      }
      return null;
    },
    getRefName: function(ref){
      switch (ref) {
      case 'detail':
        return this.names.detailTemplateName;
      case 'list':
        return this.names.listTemplateName;
      default:
        return ref;
      }
    },
    getNames: function(docName, componentName){
      return this.names = new Names(docName, componentName);
    },
    getAttrName: function(fullAttrName){
      return _.last(fullAttrName.split('.'));
    },
    saveView: function(){
      fs.writeFileSync('bp/main.ls', code + JSON.stringify(View.registry));
    },
    registerTemplate: function(templateName, templateStr){
      this.templateRegistry || (this.templateRegistry = {});
      this.templateRegistry[templateName] = templateStr;
    },
    showTemplate: function(templateStr){
      console.log(templateStr);
    },
    addRelation: function(componentName, start, relationDescription, end, type){
      Relation.addRelation(componentName, start, relationDescription, end, type);
    },
    getRelations: function(docName){
      return Relation.getRelationsByDocName(docName);
    },
    getGoCreateLink: function(currentEnd, relation){
      return relation.getGoCreateLink(currentEnd);
    },
    getGoUpdateLink: function(currentEnd, relation){
      return relation.getGoUpdateLink(currentEnd);
    },
    getCited: function(docName){
      var relations, cited, i$, len$, relation;
      relations = Relation.getRelationsByDocName(docName);
      cited = {};
      for (i$ = 0, len$ = relations.length; i$ < len$; ++i$) {
        relation = relations[i$];
        cited[relation.getOppositeEnd(docName).docName] = {
          query: relation.getQuery(docName)
        };
      }
      return cited;
    }
  };
  code = ' \n# ********************************************************\n# *                                                      *\n# *        IT IS AUTO GENERATED DON\'T EDIT               *\n# *                                                      *\n# ********************************************************\n\n# if module?\n#   require! [fs, sugar, \'./Component\'] \n\n# BP ||= {}\n# BP.Component ||= Component\n\n# debugger\nBP.Component.create-components-from-jade-views jade-views = ';
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
