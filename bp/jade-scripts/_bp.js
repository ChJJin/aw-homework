// Generated by LiveScript 1.2.0
(function(){
  var fs, jade, Names, Relation, Page, _, filters;
  fs = require('fs');
  jade = require('jade');
  Names = require('./Names');
  Relation = require('./Relation');
  Page = require('./Page');
  _ = require('underscore');
  import$(jade.filters, filters = require('./_bp-filters'));
  module.exports = {
    components: [],
    relations: [],
    pages: [],
    variables: {},
    addComponent: function(namespace, docName, isMainNav, className){
      this.initVariables(namespace, docName);
      return this.components.push({
        namespace: namespace,
        docName: docName,
        isMainNav: isMainNav,
        className: className
      });
    },
    initVariables: function(namespace, docName){
      var ref$;
      (ref$ = this.variables)[namespace] || (ref$[namespace] = {});
      (ref$ = this.variables[namespace])[docName] || (ref$[docName] = {
        table: {
          rowLinks: [],
          rowMultipleLinks: [],
          tableLinks: [],
          removedLinks: []
        }
      });
    },
    addRelation: function(namespace, start, relationDescription, end, type){
      var relation;
      this.relations.push(relation = {
        namespace: namespace,
        start: start,
        relationDescription: relationDescription,
        end: end,
        type: type
      });
      relation = Relation.addRelation(relation);
    },
    addPage: function(namespace, name, isMainNav){
      var page;
      this.pages.push(page = new Page({
        namespace: namespace,
        name: name,
        isMainNav: isMainNav
      }));
      return page;
    },
    savePage: function(){
      this._saveAllConfiguration();
    },
    _saveAllConfiguration: function(){
      fs.writeFileSync('bp/main.ls', ("BP.Component.create-components " + JSON.stringify(this.components) + ", " + JSON.stringify(this.relations) + "\n") + ("BP.Page.create-pages " + JSON.stringify(this.pages)));
    },
    value: function(attr){
      var ref$, docName, result;
      if (attr.indexOf('.') > 0) {
        ref$ = attr.split('.'), docName = ref$[0], attr = ref$[1];
        return result = "{{#with " + docName + "}} {{bs '" + attr + "'}} {{/with}}";
      } else {
        return result = "{{bs '" + attr + "'}}";
      }
    },
    getNames: function(namespace, docName){
      return this.names = new Names(namespace, docName);
    },
    getAttrName: function(fullAttrName){
      return _.last(fullAttrName.split('.'));
    },
    getDocName: function(fullAttrName){
      return _.first(fullAttrName.split('.'));
    },
    saveComponent: function(){
      this._saveAllConfiguration();
    },
    registerTemplate: function(templateName, templateStr){
      this.templateRegistry || (this.templateRegistry = {});
      this.templateRegistry[templateName] = templateStr;
    },
    showTemplate: function(templateStr){
      console.log(templateStr);
    },
    getRelations: function(docName){
      return Relation.getRelationsByDocName(docName);
    },
    getViewTemplateName: function(namespace, docName, viewName){
      var names;
      names = this.getNames(namespace, docName);
      if (viewName === 'list') {
        return names.listTemplateName;
      } else {
        return names.detailTemplateName;
      }
    },
    getTableConfig: function(namespace, docName){
      var config;
      return config = this.variables[namespace][docName].table;
    },
    addItemLink: function(namespace, docName, link){
      return this.variables[namespace][docName].table.rowLinks.push(link);
    },
    addItemLinks: function(namespace, docName, link){
      return this.variables[namespace][docName].table.rowMultipleLinks.push(link);
    },
    addListLink: function(namespace, docName, link){
      return this.variables[namespace][docName].table.tableLinks.push(link);
    },
    removeLink: function(namespace, docName, linkName){
      this.variables[namespace][docName].table.removedLinks.push(linkName);
      return this.variables[namespace][docName].table.removedLinks.unique();
    }
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
